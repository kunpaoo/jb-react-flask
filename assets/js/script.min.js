


function showtime() {
 var t = new Date(),
  e = t.getHours(),
  n = t.getMinutes(),
  s = t.getSeconds(),
  a = "AM";
 e > 12 && ((e -= 12), (a = "PM")),
  0 == e && (e = 12),
  e < 10 && (e = "0" + e),
  n < 10 && (n = "0" + n),
  s < 10 && (s = "0" + s),

(document.getElementById("time").innerHTML = e + ":" + n + ":" + s + " " + a);}


document.addEventListener(
 "DOMContentLoaded",
 function () {
  var t = document.querySelectorAll("[data-bss-chart]");
  for (var e of t) e.chart = new Chart(e, JSON.parse(e.dataset.bssChart));
 },
 !1
),
 $(function () {
  $('[data-toggle="tooltip"]').tooltip();
 }),
 setInterval(showtime, 500);

const DOMstrings = {
  stepsBtnClass: "multisteps-form__progress-btn",
  stepsBtns: document.querySelectorAll(".multisteps-form__progress-btn"),
  stepsBar: document.querySelector(".multisteps-form__progress"),
  stepsForm: document.querySelector(".multisteps-form__form"),
  stepsFormTextareas: document.querySelectorAll(".multisteps-form__textarea"),
  stepFormPanelClass: "multisteps-form__panel",
  stepFormPanels: document.querySelectorAll(".multisteps-form__panel"),
  stepPrevBtnClass: "js-btn-prev",
  stepNextBtnClass: "js-btn-next",
 },
 removeClasses = (t, e) => {
  t.forEach((t) => {
   t.classList.remove(e);
  });
 },
 findParent = (t, e) => {
  let n = t;
  for (; !n.classList.contains(e); ) n = n.parentNode;
  return n;
 },
 getActiveStep = (t) => Array.from(DOMstrings.stepsBtns).indexOf(t),
 setActiveStep = (t) => {
  removeClasses(DOMstrings.stepsBtns, "js-active"),
   DOMstrings.stepsBtns.forEach((e, n) => {
    n <= t && e.classList.add("js-active");
   });
 },
 getActivePanel = () => {
  let t;
  return (
   DOMstrings.stepFormPanels.forEach((e) => {
    e.classList.contains("js-active") && (t = e);
   }),
   t
  );
 },
 setActivePanel = (t) => {
  removeClasses(DOMstrings.stepFormPanels, "js-active"),
   DOMstrings.stepFormPanels.forEach((e, n) => {
    n === t && (e.classList.add("js-active"), setFormHeight(e));
   });
 },
 formHeight = (t) => {
  const e = t.offsetHeight;
  DOMstrings.stepsForm.style.height = `${e}px`;
 },
 setFormHeight = () => {
  const t = getActivePanel();
  formHeight(t);
 };
DOMstrings.stepsBar.addEventListener("click", (t) => {
 const e = t.target;
 if (!e.classList.contains(`${DOMstrings.stepsBtnClass}`)) return;
 const n = getActiveStep(e);
 setActiveStep(n), setActivePanel(n);
}),
 DOMstrings.stepsForm.addEventListener("click", (t) => {
  const e = t.target;
  if (
   !e.classList.contains(`${DOMstrings.stepPrevBtnClass}`) &&
   !e.classList.contains(`${DOMstrings.stepNextBtnClass}`)
  )
   return;
  const n = findParent(e, `${DOMstrings.stepFormPanelClass}`);
  let s = Array.from(DOMstrings.stepFormPanels).indexOf(n);
  e.classList.contains(`${DOMstrings.stepPrevBtnClass}`) ? s-- : s++,
   setActiveStep(s),
   setActivePanel(s);
 }),
 window.addEventListener("load", setFormHeight, !1),
 window.addEventListener("resize", setFormHeight, !1);
const setAnimationType = (t) => {
  DOMstrings.stepFormPanels.forEach((e) => {
   e.dataset.animation = t;
  });
 },
 animationSelect = document.querySelector(".pick-animation__select");
animationSelect.addEventListener("change", () => {
 const t = animationSelect.value;
 setAnimationType(t);
});
var currentTab = 0;
function showTab(t) {
 var e = document.getElementsByClassName("tab");
 (e[t].style.display = "block"),
  (document.getElementById("prevBtn").style.display =
   0 == t ? "none" : "inline"),
  t == e.length - 1
   ? (document.getElementById("nextBtn").innerHTML = "Submit")
   : (document.getElementById("nextBtn").innerHTML = "Next"),
  t >= e.length &&
   ((document.getElementById("prevBtn").style.display = "none"),
   (document.getElementById("nextBtn").style.display = "none")),
  fixStepIndicator(t);
}
function nextPrev(t) {
 var e = document.getElementsByClassName("tab");
 return (
  !(1 == t && !validateForm()) &&
  ((e[currentTab].style.display = "none"),
  (currentTab += t) >= e.length
   ? (document.getElementById("regForm").submit(), !1)
   : void showTab(currentTab))
 );
}
function validateForm() {
 var t,
  e,
  n = !0;
 for (
  t = document
   .getElementsByClassName("tab")
   [currentTab].getElementsByTagName("input"),
   e = 0;
  e < t.length;
  e++
 )
  "" == t[e].value && ((t[e].className += " is-invalid"), (n = !1));
 return (
  n &&
   (document.getElementsByClassName("step")[currentTab].className += " finish"),
  n
 );
}

function fixStepIndicator(t) {
 var e,
  n = document.getElementsByClassName("step");
 for (e = 0; e < n.length; e++)
  n[e].className = n[e].className.replace(" active", "");
 n[t].className += " active";
}
showTab(currentTab),
 (function (t) {
  var e = new Date();
  e.setHours(0, 0, 0, 0);
  var n,
   s,
   a = {
    date: null,
    weekDayLength: 1,
    prevButton: "Prev",
    nextButton: "Next",
    monthYearSeparator: " ",
    onClickDate: function (t) {},
    onChangeMonth: function (t) {},
    onClickToday: function (t) {},
    onClickMonthNext: function (t) {},
    onClickMonthPrev: function (t) {},
    onClickYearNext: function (t) {},
    onClickYearPrev: function (t) {},
    onShowYearView: function (t) {},
    onSelectYear: function (t) {},
    showThreeMonthsInARow: !0,
    enableMonthChange: !0,
    enableYearView: !0,
    showTodayButton: !0,
    highlightSelectedWeekday: !0,
    highlightSelectedWeek: !0,
    todayButtonContent: "Today",
    showYearDropdown: !1,
    min: null,
    max: null,
    disable: function (t) {},
    startOnMonday: !1,
   },
   o = !1,
   i = {
    1: "january",
    2: "february",
    3: "march",
    4: "april",
    5: "may",
    6: "june",
    7: "july",
    8: "august",
    9: "september",
    10: "october",
    11: "november",
    12: "december",
   },
   r = {
    0: "sunday",
    1: "monday",
    2: "tuesday",
    3: "wednesday",
    4: "thursday",
    5: "friday",
    6: "saturday",
   },
   l = {
    1: "monday",
    2: "tuesday",
    3: "wednesday",
    4: "thursday",
    5: "friday",
    6: "saturday",
    7: "sunday",
   };
  function c(t) {
   return new Date(t.getFullYear(), t.getMonth() + 1, 0);
  }
  function d(t, e) {
   var n = (function (t) {
     var e = t.getMonth() + 1 + "/1/" + t.getFullYear();
     return new Date(e);
    })(t),
    s = n.getDate(),
    a = c(t),
    o = (function (t) {
     var e = t.getMonth(),
      n = t.getFullYear();
     return 0 === e && ((n -= 1), (e = 12)), new Date(n, e, 0);
    })(t).getDate(),
    i = [],
    r = n.getDay();
   settings.startOnMonday && (r -= 1);
   var l = 1;
   if (1 === e) {
    for (var d = r - 1; d >= 0; d--) {
     var u = new Date(t.getFullYear(), t.getMonth() - 1, o - d);
     i.push(u);
    }
    for (var g = 7 - i.length, h = 0; h < g; h++) {
     u = new Date(n.getFullYear(), n.getMonth(), s + h);
     i.push(u);
    }
   } else
    for (var m = 7 * (e - 1) - r, f = 1; f <= 7; f++)
     if (m + f <= a) {
      u = new Date(t.getFullYear(), t.getMonth(), m + f);
      i.push(u);
     } else {
      u = new Date(t.getFullYear(), t.getMonth() + 1, l++);
      i.push(u);
     }
   return i;
  }

  function u(t, n) {
   var a = "";
   return (
    (a += '<div class="calendar-box">'),
    o
     ? ((a += '<div class="months-container">'),
       (a += (function (t) {
        var e =
         '<div class="buttons-container">' +
         (settings.enableMonthChange && settings.enableYearView
          ? '<button class="prev-button">' + settings.prevButton + "</button>"
          : "") +
         '<span class="label-container year-label">';
        if (settings.showYearDropdown) {
         e += '<select class="year-dropdown">';
         for (var n = 1970; n < 2117; n++)
          n === t.getFullYear()
           ? (e +=
              '<option selected="selected" value="' +
              n +
              '">' +
              n +
              "</option>")
           : (e += '<option value="' + n + '">' + n + "</option>");
         e += "</select>";
        } else e += t.getFullYear();
        return (
         e +
         "</span>" +
         (settings.enableMonthChange && settings.enableYearView
          ? '<button class="next-button">' + settings.nextButton + "</button>"
          : "") +
         "</div>"
        );
       })(n)),
       (a += (function (t) {
        var e = "";
        for (var n in ((e += '<div class="months-wrapper">'), i))
         i.hasOwnProperty(n) &&
          (e +=
           '<span class="month' +
           (settings.showThreeMonthsInARow ? " one-third" : "") +
           '" data-month="' +
           n +
           '" data-year="' +
           t.getFullYear() +
           '"><span>' +
           i[n] +
           "</span></span>");
        return e + "</div>";
       })(n)),
       (a += "</div>"))
     : ((a += '<div class="weeks-container">'),
       (a += (function (t) {
        return (
         '<div class="buttons-container">' +
         (settings.enableMonthChange
          ? '<button class="prev-button">' + settings.prevButton + "</button>"
          : "") +
         '<span class="label-container month-container"><span class="month-label">' +
         i[t.getMonth() + 1] +
         "</span>" +
         settings.monthYearSeparator +
         '<span class="year-label">' +
         t.getFullYear() +
         "</span></span>" +
         (settings.enableMonthChange
          ? '<button class="next-button">' + settings.nextButton + "</button>"
          : "") +
         "</div>"
        );
       })(n)),
       (a += (function (t) {
        var e = "";
        for (var n in ((e += '<div class="weeks-wrapper header">'),
        (e +=
         '<div class="week' +
         (settings.startOnMonday ? " start-on-monday" : "") +
         '" data-week-no="0">'),
        r))
         r.hasOwnProperty(n) &&
          (e +=
           '<div class="day header" data-day="' +
           n +
           '">' +
           r[n].substring(0, settings.weekDayLength) +
           "</div>");
        return (e += "</div>"), e + "</div>";
       })()),
       (a += (function (t, n) {
        var a = "";
        return (
         (a += '<div class="weeks-wrapper">'),
         t.forEach(function (t, o) {
          (a +=
           '<div class="week' +
           (settings.startOnMonday ? " start-on-monday" : "") +
           '" data-week-no="' +
           (o + 1) +
           '">'),
           t.forEach(function (t, o) {
            var i = !1;
            t.getMonth() !== n.getMonth() && (i = !0),
             (i = i ? " disabled" : "");
            var r = !1;
            s
             ? (t == s.toString() && (r = !0), (r = r ? " selected" : ""))
             : (r = "");
            var l = !1;
            t == e.toString() && (l = !0), (l = l ? " today" : "");
            var c = "ola";
            ((settings.min && settings.min > t) ||
             (settings.max && settings.max < t) ||
             (settings.disable &&
              "function" == typeof settings.disable &&
              settings.disable(t))) &&
             (c = 'disabled="disabled" '),
             (a +=
              '<div class="day' +
              i +
              r +
              l +
              '" data-date="' +
              t +
              '" ' +
              c +
              " ><span>" +
              t.getDate() +
              "</span></div>");
           }),
           (a += "</div>");
         }),
         (a += "</div>")
        );
       })(t, n)),
       (a += "</div>")),
    settings.showTodayButton &&
     (a +=
      '<div class="special-buttons"><button class="today-button">' +
      settings.todayButtonContent +
      "</button></div>"),
    (a += "</div>")
   );
  }

  function g(e) {
   var s = (function (t) {
    for (
     var e = c(t).getDate(),
      n = c(t).getDate(),
      s = parseInt(e / 7) + 1,
      a = [],
      o = 1;
     o <= s;
     o++
    )
     a.push(d(t, o));
    var i = a[a.length - 1],
     r = i[i.length - 1].getDate();
    return r < n && n - r < 7 && a.push(d(t, o)), a;
   })(e);
   n.html(u(s, e)),
    settings.highlightSelectedWeekday &&
     (function () {
      var e = n.find(".selected");
      if (e.length > 0) {
       var s = new Date(e.data("date")).getDay();
       n.find(".week").each(function (e, n) {
        t(n)
         .find(".day:eq(" + (s - 0) + ")")
         .addClass("highlight");
       });
      }
     })(),
    settings.highlightSelectedWeek &&
     n.find(".selected").parents(".week").addClass("highlight");
  }
  (t.fn.updateCalendarOptions = function (e) {
   var n = t.extend(settings, e);
   t.fn.calendar.bind(this)(n);
  }),
   (t.fn.calendar = function (i) {
    var c;
    return (
     (settings = t.extend(a, i)),
     settings.startOnMonday && (r = l),
     settings.min &&
      ((settings.min = new Date(settings.min)),
      settings.min.setHours(0),
      settings.min.setMinutes(0),
      settings.min.setSeconds(0)),
     settings.max &&
      ((settings.max = new Date(settings.max)),
      settings.max.setHours(0),
      settings.max.setMinutes(0),
      settings.max.setSeconds(0)),
     (n = t(this)),
     settings.date
      ? ((s =
         "string" == typeof settings.date
          ? new Date(settings.date)
          : settings.date).setHours(0, 0, 0, 0),
        (c = s))
      : (c = e),
     (window.currentDate = c),
     g(c),
     settings.enableMonthChange &&
      (n
       .off("click", ".weeks-container .prev-button")
       .on("click", ".weeks-container .prev-button", function (t) {
        (c = new Date(c.getFullYear(), c.getMonth() - 1, 1)),
         settings.onClickMonthPrev(c),
         g(c);
       }),
      n
       .off("click", ".weeks-container .next-button")
       .on("click", ".weeks-container .next-button", function (t) {
        (c = new Date(c.getFullYear(), c.getMonth() + 1, 1)),
         settings.onClickMonthNext(c),
         g(c);
       })),
     n.off("click", ".day").on("click", ".day", function (e) {
      var n = t(this).data("date");
      "disabled" === t(this).attr("disabled") || settings.onClickDate(n);
     }),
     settings.enableMonthChange &&
      settings.enableYearView &&
      (n
       .off("click", ".month-container")
       .on("click", ".month-container", function (t) {
        (o = !0),
         (c = new Date(c.getFullYear(), 0, 1)),
         settings.onShowYearView(c),
         g(c);
       }),
      n
       .off("click", ".months-container .month")
       .on("click", ".months-container .month", function (e) {
        var n = t(this),
         s = n.data("month"),
         a = n.data("year"),
         i = new Date(a, s - 1, 1);
        settings.onChangeMonth(i), (o = !1), g((c = i));
       }),
      n
       .off("click", ".months-container .prev-button")
       .on("click", ".months-container .prev-button", function (t) {
        (c = new Date(c.getFullYear() - 1, 0, 1)),
         settings.onClickYearPrev(c),
         settings.onSelectYear(c),
         g(c);
       }),
      n
       .off("click", ".months-container .next-button")
       .on("click", ".months-container .next-button", function (t) {
        (c = new Date(c.getFullYear() + 1, 0, 1)),
         settings.onClickMonthNext(c),
         settings.onSelectYear(c),
         g(c);
       }),
      n
       .off("change", ".months-container .year-dropdown")
       .on("change", ".months-container .year-dropdown", function (e) {
        var n = t(this).val();
        (c = new Date(n, 0, 1)), settings.onSelectYear(c), g(c);
       })),
     settings.showTodayButton &&
      n
       .off("click", ".today-button")
       .on("click", ".today-button", function (t) {
        (c = e), (s = e), settings.onClickToday(e), (o = !1), g(c);
       }),
     this
    );
   });
 })(jQuery);
